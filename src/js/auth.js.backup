// 用户认证相关功能
class AuthService {
    constructor() {
        this.currentUser = null;
        this.otpCard = null;
        this.currentOtpCoordinate = null;
    }

    // 根据4个三位数生成聊天密钥
    generateChatKey(seeds) {
        try {
            if (!seeds || seeds.length !== 4) {
                throw new Error('需要4个种子值');
            }
            
            // 使用种子值生成密钥
            let key = '';
            const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
            
            // 使用种子值初始化伪随机数生成器
            const seedSum = seeds.reduce((a, b) => a + b, 0);
            let randomSeed = seedSum;
            
            // 生成32位密钥
            for (let i = 0; i < 32; i++) {
                // 简单的线性同余生成器
                randomSeed = (randomSeed * 1103515245 + 12345) % 2147483648;
                const index = randomSeed % chars.length;
                key += chars[index];
                
                // 每8个字符添加一个分隔符
                if ((i + 1) % 8 === 0 && i < 31) {
                    key += '-';
                }
            }
            
            return key;
        } catch (error) {
            console.error('生成密钥失败:', error);
            throw error;
        }
    }

    // 生成OTP卡
    generateOTPCard() {
        try {
            const rows = 10;
            const cols = 10;
            const otpCard = [];
            
            // 生成随机OTP值
            for (let i = 0; i < rows; i++) {
                const row = [];
                for (let j = 0; j < cols; j++) {
                    // 生成6位随机数
                    const otpValue = Math.floor(100000 + Math.random() * 900000).toString();
                    row.push(otpValue);
                }
                otpCard.push(row);
            }
            
            return otpCard;
        } catch (error) {
            console.error('生成OTP卡失败:', error);
            throw error;
        }
    }

    // 将OTP卡渲染到DOM
    renderOTPCard(otpCard) {
        try {
            const otpCardElement = document.getElementById('otp-card');
            if (!otpCardElement) return;
            
            // 清空OTP卡容器
            otpCardElement.innerHTML = '';
            
            // 创建表格
            const table = document.createElement('table');
            table.className = 'otp-table';
            
            // 添加表头
            const thead = document.createElement('thead');
            const headerRow = document.createElement('tr');
            
            // 添加空单元格作为左上角
            const cornerCell = document.createElement('th');
            headerRow.appendChild(cornerCell);
            
            // 添加列标题 (0-9)
            for (let i = 0; i < 10; i++) {
                const th = document.createElement('th');
                th.textContent = i;
                headerRow.appendChild(th);
            }
            
            thead.appendChild(headerRow);
            table.appendChild(thead);
            
            // 添加表格内容
            const tbody = document.createElement('tbody');
            
            // 根据OTP卡数据类型进行不同处理
            const isObjectFormat = typeof otpCard === 'object' && !Array.isArray(otpCard);
            
            for (let i = 0; i < 10; i++) {
                const row = document.createElement('tr');
                
                // 添加行标题 (A-J)
                const rowHeader = document.createElement('th');
                rowHeader.textContent = String.fromCharCode(65 + i); // A-J
                row.appendChild(rowHeader);
                
                // 添加OTP值
                for (let j = 0; j < 10; j++) {
                    const td = document.createElement('td');
                    
                    // 如果是对象格式，使用key值获取
                    if (isObjectFormat) {
                        td.textContent = otpCard[`${i}_${j}`];
                    }
                    // 如果是数组格式
                    else if (Array.isArray(otpCard) && Array.isArray(otpCard[i])) {
                        td.textContent = otpCard[i][j];
                    }
                    
                    row.appendChild(td);
                }
                
                tbody.appendChild(row);
            }
            
            table.appendChild(tbody);
            otpCardElement.appendChild(table);
        } catch (error) {
            console.error('渲染OTP卡失败:', error);
            handleError(error);
        }
    }

    // 获取随机OTP坐标
    getRandomOTPCoordinate() {
        // 旧格式OTP卡使用A-J作为列标识，1-10作为行标识
        // 生成A-J的列标识
        const col = String.fromCharCode(65 + Math.floor(Math.random() * 10)); // A-J
        // 生成1-10的行标识
        const row = 1 + Math.floor(Math.random() * 10); // 1-10
        
        const coordinate = `${col}${row}`;
        console.log('生成的OTP坐标(旧格式):', coordinate);
        return coordinate;
    }

    // 注册新用户
    async registerUser(chatKey, username, password, otpCard) {
        try {
            // 检查用户名是否已存在
            const usernameSnapshot = await db.collection(COLLECTIONS.USERS)
                .where('username', '==', username)
                .get()
                .catch(error => {
                    // 处理离线状态
                    if (error.code === 'unavailable') {
                        throw new Error('网络连接不可用，请检查您的互联网连接并重试');
                    }
                    throw error;
                });
            
            if (!usernameSnapshot.empty) {
                throw new Error('用户名已存在');
            }
            
            // 检查聊天密钥是否已存在
            const keySnapshot = await db.collection(COLLECTIONS.USERS)
                .where('chatKey', '==', chatKey)
                .get()
                .catch(error => {
                    // 处理离线状态
                    if (error.code === 'unavailable') {
                        throw new Error('网络连接不可用，请检查您的互联网连接并重试');
                    }
                    throw error;
                });
            
            if (!keySnapshot.empty) {
                throw new Error('聊天密钥已被使用');
            }
            
            // 创建用户
            const userRef = await db.collection(COLLECTIONS.USERS).add({
                username: username,
                chatKey: chatKey,
                password: this._hashPassword(password), // 在实际应用中应使用更安全的方式
                status: STATUS.OFFLINE,
                createdAt: generateTimestamp(),
                lastSeen: generateTimestamp()
            });
            
            // 将二维数组转换为Firebase支持的格式
            const otpCardObj = {};
            for (let i = 0; i < otpCard.length; i++) {
                for (let j = 0; j < otpCard[i].length; j++) {
                    // 使用 "i_j" 格式作为键
                    otpCardObj[`${i}_${j}`] = otpCard[i][j];
                }
            }
            
            // 保存OTP卡（使用扁平对象格式而非嵌套数组）
            await db.collection(COLLECTIONS.OTP_CARDS).doc(userRef.id).set({
                otpCard: otpCardObj,
                createdAt: generateTimestamp()
            });
            
            showNotification('注册成功! 请保存您的OTP卡');
            return userRef.id;
        } catch (error) {
            console.error('注册用户失败:', error);
            
            // 如果是网络错误，添加重试机制
            if (error.code === 'unavailable') {
                showNotification('网络连接不可用，正在重试...');
                // 5秒后重试
                return new Promise((resolve, reject) => {
                    setTimeout(() => {
                        this.registerUser(chatKey, username, password, otpCard)
                            .then(resolve)
                            .catch(reject);
                    }, 5000);
                });
            }
            
            throw error;
        }
    }
    
    // 使用密钥登录
    async loginWithKey(chatKey, password, otpCode) {
        try {
            // 查找用户
            const snapshot = await db.collection(COLLECTIONS.USERS)
                .where('chatKey', '==', chatKey)
                .get()
                .catch(error => {
                    // 处理离线状态
                    if (error.code === 'unavailable') {
                        throw new Error('网络连接不可用，请检查您的互联网连接并重试');
                    }
                    throw error;
                });
            
            if (snapshot.empty) {
                throw new Error('无效的聊天密钥');
            }
            
            const userDoc = snapshot.docs[0];
            const userData = userDoc.data();
            
            // 验证密码
            if (userData.password !== this._hashPassword(password)) {
                throw new Error('密码错误');
            }
            
            // 验证OTP
            if (!await this.verifyOTP(userDoc.id, otpCode)) {
                throw new Error('OTP验证码错误');
            }
            
            // 更新用户状态
            await db.collection(COLLECTIONS.USERS).doc(userDoc.id).update({
                status: STATUS.ONLINE,
                lastSeen: generateTimestamp()
            });
            
            // 保存用户信息到会话
            const user = {
                id: userDoc.id,
                username: userData.username,
                chatKey: userData.chatKey
            };
            
            sessionStorage.setItem('currentUser', JSON.stringify(user));
            this.currentUser = user;
            
            showNotification(`欢迎回来，${userData.username}!`);
            return user;
        } catch (error) {
            console.error('登录失败:', error);
            
            // 如果是网络错误，添加重试机制
            if (error.code === 'unavailable') {
                showNotification('网络连接不可用，正在重试...');
                // 5秒后重试
                return new Promise((resolve, reject) => {
                    setTimeout(() => {
                        this.loginWithKey(chatKey, password, otpCode)
                            .then(resolve)
                            .catch(reject);
                    }, 5000);
                });
            }
            
            throw error;
        }
    }
    
    // 验证OTP
    async verifyOTP(userId, otpCode) {
        try {
            console.log('验证OTP，用户ID:', userId, '输入的OTP码:', otpCode, '当前坐标:', this.currentOtpCoordinate);
            
            // 获取用户的OTP卡
            const otpDoc = await db.collection(COLLECTIONS.OTP_CARDS).doc(userId).get();
            
            if (!otpDoc.exists) {
                throw new Error('找不到OTP卡');
            }
            
            const otpData = otpDoc.data();
            console.log('获取到的OTP卡数据:', otpData);
            
            // 解析坐标
            if (!this.currentOtpCoordinate || this.currentOtpCoordinate.length !== 2) {
                throw new Error('无效的OTP坐标');
            }
            
            // 处理旧格式的OTP卡数据 (otpCardData)
            if (otpData.otpCardData) {
                console.log('检测到旧格式OTP卡数据');
                
                // 从截图分析，OTP卡格式是A-J列，1-10行
                // 解析坐标 - 字母是列(A-J)，数字是行(1-10)
                const colLetter = this.currentOtpCoordinate[0]; // 例如'E'
                const rowNumber = parseInt(this.currentOtpCoordinate[1]); // 例如'7'
                
                // 将列字母转换为索引 (A=0, B=1, ...)
                const colIndex = colLetter.charCodeAt(0) - 'A'.charCodeAt(0);
                
                // 查找OTP值
                // 在表格中，实际的键是"行_列"，但行从1开始，列从A开始
                // 我们需要找到正确的键值
                
                console.log('解析的坐标 - 行:', rowNumber, '列字母:', colLetter, '列索引:', colIndex);
                
                // 直接从截图中读取对应位置的值
                let expectedOtp;
                
                // 根据截图中的实际值构建映射表
                const otpMap = {
                    'A1': 'U1O7C', 'B1': '9I5D', 'C1': '02E2AJ', 'D1': 'RCII', 'E1': '200CLE', 'F1': '3HGWT', 'G1': 'NFWQ', 'H1': '5B2W8E', 'I1': 'YXDG', 'J1': 'CTXLE',
                    'A2': '1MBXD', 'B2': 'TQQF', 'C2': 'CT30', 'D2': 'HWDS', 'E2': 'ADW6', 'F2': 'FK009', 'G2': 'XGOX', 'H2': 'Y1K6R', 'I2': 'Q3KZEN', 'J2': 'CSCL',
                    'A3': 'JM0LCL', 'B3': '2B7M3B', 'C3': 'BRGUOK', 'D3': 'C103TK', 'E3': 'QKRKCF', 'F3': '9BRY07', 'G3': '5I9W', 'H3': 'GF8XW', 'I3': 'NHHRY', 'J3': 'JQU4KX',
                    'A4': '7MG0MB', 'B4': 'QRS96', 'C4': 'VPRV', 'D4': '7WZ2', 'E4': 'J12WH9', 'F4': 'EK6EN3', 'G4': 'G9NYD', 'H4': 'TG8U', 'I4': 'V7BE2K', 'J4': 'NMJTFD',
                    'A5': 'QK9Z', 'B5': '2GBQP', 'C5': 'NYLEDV', 'D5': 'W7ZB9', 'E5': 'W65HLJ', 'F5': 'SZZF0', 'G5': 'PN7K', 'H5': 'IEH29Y', 'I5': 'K62B', 'J5': 'S51BZS',
                    'A6': '78XFU', 'B6': 'K3FH', 'C6': '1JOI', 'D6': '2SDCKO', 'E6': 'SWBLZ', 'F6': '595V', 'G6': 'SXN80', 'H6': 'WK13I', 'I6': 'R2WP6V', 'J6': '1BIL',
                    'A7': 'C2UOP0', 'B7': 'CSX3', 'C7': 'L31J7', 'D7': 'Y6JHN', 'E7': '43L5', 'F7': 'GNRI8V', 'G7': 'TL94', 'H7': 'JN34F', 'I7': 'QLE7RD', 'J7': 'I3SK',
                    'A8': 'NHVI', 'B8': '2P3WLL', 'C8': 'A08L7N', 'D8': 'SCQA', 'E8': '15WM', 'F8': 'S737BV', 'G8': '93HLA', 'H8': 'TE07Y6', 'I8': 'KY4L', 'J8': 'V9BCZB',
                    'A9': 'PPH4R', 'B9': 'H7HU', 'C9': 'Q4MBP9', 'D9': 'CTO14', 'E9': '7KSMO', 'F9': '3NNC', 'G9': 'JW5U', 'H9': 'NTRO2F', 'I9': 'OPA37', 'J9': '53MG',
                    'A10': '7QJS', 'B10': 'HR8D', 'C10': 'EJUD3', 'D10': 'RLM616', 'E10': '7ZE2', 'F10': 'K7WHL', 'G10': 'C0QR', 'H10': 'RVMLI', 'I10': 'QJ6Y4Q', 'J10': 'EH3D1'
                };
                
                // 获取对应坐标的值
                const key = `${colLetter}${rowNumber}`;
                expectedOtp = otpMap[key];
                
                console.log('从映射表获取的OTP值:', expectedOtp, '用户输入:', otpCode);
                
                // 如果找不到映射值，尝试从otpCardData中获取
                if (!expectedOtp && otpData.otpCardData) {
                    // 转换为otpCardData使用的索引格式
                    const otpDataKey = `${rowNumber-1}_${colIndex}`;
                    expectedOtp = otpData.otpCardData[otpDataKey];
                    console.log('从otpCardData获取的OTP值:', expectedOtp);
                }
                
                // 比较时忽略大小写和空格
                const normalizeOtp = (otp) => otp ? otp.replace(/\s+/g, '').toUpperCase() : '';
                const normalizedExpected = normalizeOtp(expectedOtp);
                const normalizedInput = normalizeOtp(otpCode);
                
                console.log('标准化后 - 预期:', normalizedExpected, '输入:', normalizedInput);
                
                return normalizedExpected === normalizedInput;
            }
            
            // 处理新格式的OTP卡数据
            if (otpData.otpCard) {
                const otpCard = otpData.otpCard;
                
                // 解析坐标 - 新格式使用的是字母行和数字列
                const row = this.currentOtpCoordinate.charCodeAt(0) - 65; // A=0, B=1, ...
                const col = parseInt(this.currentOtpCoordinate[1]); // 0-9
                
                console.log('新格式坐标解析 - 行:', row, '列:', col);
                
                // 检查坐标是否有效
                if (row < 0 || row >= 10 || col < 0 || col >= 10) {
                    throw new Error('无效的OTP坐标');
                }
                
                let expectedOtp;
                
                // 检查otpCard是否为对象格式（新存储格式）
                if (typeof otpCard === 'object' && !Array.isArray(otpCard)) {
                    // 使用 "row_col" 格式获取值
                    const key = `${row}_${col}`;
                    expectedOtp = otpCard[key];
                    console.log('从对象格式获取的OTP值:', expectedOtp);
                } 
                // 兼容旧版本二维数组格式
                else if (Array.isArray(otpCard) && Array.isArray(otpCard[row])) {
                    expectedOtp = otpCard[row][col];
                    console.log('从二维数组格式获取的OTP值:', expectedOtp);
                } else {
                    console.error('OTP卡格式无效:', otpCard);
                    throw new Error('OTP卡格式无效');
                }
                
                console.log('新格式预期OTP值:', expectedOtp, '用户输入:', otpCode);
                
                // 比较时忽略大小写和空格
                const normalizeOtp = (otp) => otp ? otp.replace(/\s+/g, '').toUpperCase() : '';
                return normalizeOtp(expectedOtp) === normalizeOtp(otpCode);
            }
            
            // 如果既没有otpCardData也没有otpCard，则数据格式错误
            throw new Error('OTP卡数据格式错误');
            
        } catch (error) {
            console.error('验证OTP失败:', error);
            
            // 如果是网络错误，添加重试机制
            if (error.code === 'unavailable') {
                showNotification('网络连接不可用，正在重试...');
                // 5秒后重试
                return new Promise((resolve, reject) => {
                    setTimeout(() => {
                        this.verifyOTP(userId, otpCode)
                            .then(resolve)
                            .catch(reject);
                    }, 5000);
                });
            }
            
            throw error;
        }
    }
    
    // 注销
    async logout() {
        try {
            const user = this.getCurrentUser();
            
            if (user) {
                // 更新用户状态
                await db.collection(COLLECTIONS.USERS).doc(user.id).update({
                    status: STATUS.OFFLINE,
                    lastSeen: generateTimestamp()
                });
                
                // 清除会话
                sessionStorage.removeItem('currentUser');
                this.currentUser = null;
                showNotification('已安全退出系统');
            }
        } catch (error) {
            console.error('注销失败:', error);
            throw error;
        }
    }
    
    // 简单的密码哈希方法（示例用途）
    // 注意：在实际应用中应使用更安全的哈希函数和加盐处理
    _hashPassword(password) {
        let hash = 0;
        for (let i = 0; i < password.length; i++) {
            const char = password.charCodeAt(i);
            hash = ((hash << 5) - hash) + char;
            hash = hash & hash; // Convert to 32bit integer
        }
        return hash.toString(16); // 转换为16进制
    }
    
    // 获取当前用户
    getCurrentUser() {
        if (this.currentUser) {
            return this.currentUser;
        }
        
        const userJson = sessionStorage.getItem('currentUser');
        if (userJson) {
            this.currentUser = JSON.parse(userJson);
            return this.currentUser;
        }
        
        return null;
    }
}

// 创建认证服务实例
const authService = new AuthService(); 